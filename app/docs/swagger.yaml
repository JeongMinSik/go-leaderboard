definitions:
  handler.deleteData:
    properties:
      isDeleted:
        type: boolean
      name:
        type: string
    type: object
  handler.messageData:
    properties:
      message:
        type: string
    type: object
  handler.userCountData:
    properties:
      count:
        type: integer
    type: object
  leaderboard.User:
    properties:
      name:
        type: string
      score:
        type: number
    type: object
  leaderboard.UserRank:
    properties:
      name:
        type: string
      rank:
        type: integer
      score:
        type: number
    type: object
host: localhost:6025
info:
  contact:
    email: jms6025a@naver.com
    name: JeongMinSik
    url: https://github.com/JeongMinSik/go-leaderboard
  description: go언어로 만든 리더보드 api 토이프로젝트입니다.
  title: Leaderboard API
  version: "1.0"
paths:
  /:
    get:
      description: 테스트용
      responses:
        "200":
          description: Hello go-leaderboard
          schema:
            type: string
      tags:
      - test
  /teapot:
    get:
      description: 테스트용
      responses:
        "418":
          description: I'm a teapot
          schema:
            type: string
      tags:
      - test
  /users:
    delete:
      description: 기존 user를 삭제합니다.
      parameters:
      - description: User name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.deleteData'
        "400":
          description: name 확인 필요
          schema:
            $ref: '#/definitions/handler.messageData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Delete a user
      tags:
      - Users
    get:
      description: name으로 User의 score와 rank를 얻습니다.
      parameters:
      - description: User name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/leaderboard.UserRank'
        "400":
          description: name query param 확인 필요
          schema:
            $ref: '#/definitions/handler.messageData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Show a user info
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: 기존 user를 수정합니다.
      parameters:
      - description: Updated User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/leaderboard.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/leaderboard.UserRank'
        "400":
          description: request body 확인 필요
          schema:
            $ref: '#/definitions/handler.messageData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Update a user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: 신규 user를 추가합니다.
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/leaderboard.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/leaderboard.UserRank'
        "400":
          description: request body 확인 필요
          schema:
            $ref: '#/definitions/handler.messageData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Add a user
      tags:
      - Users
  /users/:start/to/:stop:
    get:
      description: user list 를 받아옵니다.
      parameters:
      - description: start index
        in: path
        name: start
        required: true
        type: integer
      - description: stop index
        in: path
        name: stop
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/leaderboard.UserRank'
            type: array
        "400":
          description: param 확인 필요
          schema:
            $ref: '#/definitions/handler.messageData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Get user list
      tags:
      - Users
  /users/count:
    get:
      description: 전체 유저 수
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.userCountData'
        "500":
          description: 서버에러
          schema:
            $ref: '#/definitions/handler.messageData'
      summary: Get user count
      tags:
      - Users
swagger: "2.0"
